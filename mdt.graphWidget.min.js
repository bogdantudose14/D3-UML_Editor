(function (mdt, $) {
  $.widget('mdt.graphWidget', $.mdt.appWidget, {
    options: {
      widgetRequest: '/?',
      widgetType: 'graphWidget',
      widgetReplaceOnRequest: false,
      widgetId: 'graphWorkflowWidget',
      ticketTypesList: [],
      ticketStatuses: [],
      savedConfigs: [],
      selectedType: null,
      positions: {},
      colorDictionary: {
        green: '#006568',
        lightOrange: '#FF6F01',
        blue: '#90CAF9',
        orange: '#FFA500',
        yellow: '#FED000',
        lightBlue: '#D5E8FD',
        lightRed: '#FF2643',
        darkRed: '#8B0000',
        gray: '#808080',
        black: '#000000',
      },
      rightGroupName: {
        script: 'Script',
        supervisors: 'Supervisors',
        agents: 'Agents',
        none: 'None',
      },
      actionViewName: {
        button: 'Button',
        menu: 'Menu',
        none: 'None',
      },
      graphFilters: {},
      graphFiltersList: null,
      graphWidth: 600,
      graphHeight: 800,
    },

    _templates: {
      currentWidget:
        '\
            <div class="graph-gui"> \
                    <div class="graph-gui-head">\
                            <div class = "ui-state-default graph-header">\
                                <div class="graph-filter-buttons"></div>\
                            </div>\
                            <span class = "graph-filter-list"></span>\
                    </div>\
                <div class="graph-content">\
                    <span class="workflow_graph_legend">\
                            <span class="png_images legend_closethick">\
                            </span>\
                            <div class="legend_img"></div>\
                    </span>\
                    <div class="ctx-menu-workflow"><ul class="ctx-menu-workflow-options">\
                                        <li class="ctx-menu-workflow-option" id="workflow_toggleLeafNodes">Toggle Isolated Nodes</li>\
                                        <li class="ctx-menu-workflow-option" id="workflow_centerGraph">Center Graph</li>\
                                        <li class="ctx-menu-workflow-option" id="workflow_filterByTickets" style="display: none;">Filter by tickets</li>\
                                        <li class="ctx-menu-workflow-option" id="workflow_filterByStatus" style="display: none;">Filter by status</li>\
                                        </ul>\
                    </div>\
                    <div id="cyWorkflow" class="cyWorkflowWidget"></div>\
                </div>\
            </div>',

      filterActions: {
        refresh:
          '<span class="shell_item"><a class="png_images grid_refresh workflow_graph_refresh " title="Click to refresh graph"></a></span>',
        filter:
          '<span class="graph-filter-buttons-shell-item shell_item_txt graph_filters_off"><a class="grid_filters_edit workflow_graph_filters_edit" title="">Filter :<span class="status_off">OFF</span><span class="status_on">ON</span></a><a class="grid_filters_reset workflow_graph_filters_reset"> (Reset)</a></span>',
        filterButtonSet:
          '<div class="ui-dialog-buttonset filters-buttonset">\
                <button type="button" class="ui-button ui-corner-all ui-widget filters-apply">Apply</button>\
                <button type="button" class="ui-button ui-corner-all ui-widget filters-cancel">Cancel</button>\
                                        </div>',
      },

      legend: {
        legendButton:
          '<span class="shell_item"><a class="png_images  workflow_graph_legend_btn" title="Click for legend"></a></span>',
      },

      workflow_graph_config:
        '<div class= "footer_shell">\
		<span class= "shell_item_button save-graph-config ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary" > <a name="save-graph-config" class="ui-button-icon-primary ui-icon  ui-icon-disk save-graph-config" title="Click to save positions">&nbsp;</a></span>\
        <span class="shell_item_button discard-graph-config ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"><a name="discard-graph-config" class="ui-button-icon-primary ui-icon ui-icon-trash" title="Click to delete selected item">&nbsp;</a></span>\
        <span class="shell_item_button ui-button new-graph-config ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary"><a name="new-graph-config" class="ui-button-icon-primary ui-icon ui-icon-plusthick" title="Click to save as new item">&nbsp;</a></span>\
        <span class="shell_item new-config-name"><input class="new-config-name" name="newGraphConfigName" type="text" min="3" max="50" /></span>\
							</div >',
    },
    // -------------------------------------------------------------
    // Static members
    // -------------------------------------------------------------

    contextMenuOptions: {
      menuVariables: {
        ctxMenu: null,
        togglenodes: null,
        centergraph: null,
        menuVisible: false,
      },

      toggleMenu: function (command) {
        this.menuVariables.ctxMenu.style.display =
          command === 'show' ? 'block' : 'none';
        if (command === 'show') this.menuVariables.menuVisible = true;
        else this.menuVariables.menuVisible = false;
      },

      setPosition: function (top, left) {
        this.menuVariables.ctxMenu =
          document.querySelector('.ctx-menu-workflow');
        this.menuVariables.ctxMenu.style.left = left + 'px';
        this.menuVariables.ctxMenu.style.top = top + 'px';
        this.toggleMenu('show');
      },

      toggleIsolatedNodes: function () {
        var isolatedNodes = cyWorkflow
          .elements(cyWorkflow.$('.isolated'))
          .nodes();

        try {
          if (
            isolatedNodes[0] !== undefined &&
            isolatedNodes[0].css('display') !== 'none'
          ) {
            isolatedNodes.forEach((node) => {
              node.style('display', 'none');
            });
          } else {
            isolatedNodes.forEach((node) => {
              node.style('display', 'element');
            });

            //cy.fit();
          }
        } catch (ex) {
          mdtLogger.error('mdt-WorflowWidget - toggle nodes', ex.message);
        }

        cyWorkflow.center();
        //cy.fit();
      },

      displayClassicContextMenu: function (e, renderedPosition) {
        document.querySelector('#workflow_filterByTickets').style.display =
          'none';
        document.querySelector('#workflow_filterByStatus').style.display =
          'none';
        document.querySelector('#workflow_toggleLeafNodes').style.display =
          'block';
        document.querySelector('#workflow_centerGraph').style.display = 'block';
        e.preventDefault();

        // const left = renderedPosition.x;
        // const top = renderedPosition.y;

        const left = renderedPosition.x;
        const top = renderedPosition.y + $('.graph-header').outerHeight(true);

        this.setPosition(top, left);
        return false;
      },

      displayCustomContextMenu: function (selector, e, renderedPosition) {
        document.querySelector('#workflow_toggleLeafNodes').style.display =
          'none';
        document.querySelector('#workflow_centerGraph').style.display = 'none';

        if (selector === 'edge') {
          document.querySelector('#workflow_filterByStatus').style.display =
            'none';
          document.querySelector('#workflow_filterByTickets').style.display =
            'block';
        } else {
          document.querySelector('#workflow_filterByStatus').style.display =
            'block';
          document.querySelector('#workflow_filterByTickets').style.display =
            'none';
        }

        e.preventDefault();

        const left = renderedPosition.x;
        const top = renderedPosition.y + $('.graph-header').outerHeight(true);

        this.setPosition(top, left);
        return false;
      },
    },

    _commandList: {
      graph_init: { widgetCommand: 'graph_init' },
      graph_save_config: { widgetCommand: 'save-graph-config' },
      graph_delete_config: { widgetCommand: 'delete-graph-config' },
      graph_refresh: { widgetCommand: 'graph_refresh' },
      graph_ticket_type_select: { widgetCommand: 'graph_update_data' },
    },

    _configStateCode: {
      Default: 1,
      AddNewItem: 2,
    },

    _configState: void 0,

    // -------------------------------------------------------------
    // Constructor & Destructor functions
    // -------------------------------------------------------------
    _create: function () {
      this._super();
      this._declareLocalVariables();
      this._insertHtml();
      this._setPointers();
      this._initHeader();
      this._createBaseControls();

      return this;
    },

    _destroyEvents: function () {
      mdtLogger.log(this, '_destroyEvents');

      this.contextMenuOptions.menuVariables.togglenodes.removeEventListener(
        'click',
        this.contextMenuOptions.toggleIsolatedNodes
      );
      this.contextMenuOptions.menuVariables.centergraph.removeEventListener(
        'click',
        this.centerGraph
      );
      $(this._controls.graph_filter).find('a.workflow_graph_refresh').unbind();
      $(this._controls.graph_filter)
        .find('a.workflow_graph_filters_edit')
        .unbind();
      $(this._controls.graph_filter)
        .find('a.workflow_graph_filters_reset')
        .unbind();
      $('.graph-gui .graph-filter-list').find('.filters-apply').unbind();
      $('.graph-gui .graph-filter-list').find('.filters-cancel').unbind();
      $(this._controls.graph_filter)
        .find('a.workflow_graph_legend_btn')
        .unbind();
    },

    _destroyHTML: function () {
      mdtLogger.log(this, '_destroyHTML');

      if (cyWorkflow != null) {
        cyWorkflow.destroy();
        cyWorkflow = null;
      }
    },

    _destroyPointers: function () {
      mdtLogger.log(this, '_destroyPointers');

      this.options.filter = null;
      this.options.ticketStatuses = null;
      this.options.savedConfigs = null;
      this.options.selectedType = null;
      this.options.graphFilters = null;
      this.options.graphFiltersList = null;
      this.options.ticketTypesList = null;
      this.options.last_graph_id = null;
      this.options.selectGraphObj = null;
      this.options.positions = null;
    },

    _destroy: function () {
      this._isDisposing = true;
      mdtLogger.log(this, '_destroy', 'graphWidget');

      this._destroyEvents();
      this._destroyHTML();
      this._destroyPointers();

      mdtLogger.log(this, '_destroy', '_super');
      this._super();
    },

    _confirm: function (message, fnTrue) {
      if (this._confirmDialog) {
        this._confirmDialog.remove();
        this._confirmDialog = null;
      }

      var self = this;
      this._confirmDialog = $('<div/>')
        .appendTo(this.element)
        .layoutConfirm({
          header: '<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;' + message,
          onClose: function (bConfirm) {
            self._confirmDialog.remove();
            self._confirmDialog = null;

            if (bConfirm === true && fnTrue) fnTrue.call(self, true);
          },
        });
    },

    _initContextMenu: function () {
      this.contextMenuOptions.menuVariables.ctxMenu =
        document.querySelector('.ctx-menu-workflow');
      this.contextMenuOptions.menuVariables.togglenodes =
        document.querySelector('#workflow_toggleLeafNodes');
      this.contextMenuOptions.menuVariables.centergraph =
        document.querySelector('#workflow_centerGraph');

      try {
        this.contextMenuOptions.menuVariables.togglenodes.addEventListener(
          'click',
          this.contextMenuOptions.toggleIsolatedNodes
        );
        this.contextMenuOptions.menuVariables.centergraph.addEventListener(
          'click',
          this.centerGraph
        );
      } catch (ex) {
        mdtLogger.error(this, 'ContextMenuInit', ex.message);
      }
      var self = this;
    },

    _initFilterList: function (filters) {
      try {
        $('.graph-filter-list', this.element)
          .append(filters.FiltersHtml)
          .append(this._templates.filterActions.filterButtonSet);
      } catch (ex) {
        mdtLogger.error(this, 'Filter Button Init', ex.message);
      }
    },

    _insertHtml: function () {
      $(this._templates.currentWidget).appendTo(this.element);
    },

    _setPointers: function () {
      this._controls = {
        graph_content: $('.graph-content', this.element),
        graph_gui_head: $('.graph-gui-head', this.element),
        graph_header: $('.graph-header', this.element),
        graph_filter: $('.graph-filter-buttons', this.element),
        graph_filter_list: $('.graph-filter-list', this.element),
        //chart_element: $('#' + this._chartID, this.element),
      };
    },

    _declareLocalVariables: function () {},

    _createBaseControls: function () {},

    _init: function () {
      mdtLogger.log(this, '_init');

      // init html interface request
      this._request(null, this._commandList.graph_init);

      return this;
    },

    centerGraph: function () {
      cyWorkflow = window.cyWorkflow || {};
      if (Object.keys(cyWorkflow).length > 0) {
        cyWorkflow.center();
        cyWorkflow.fit();
      }
      //cyWorkflow.zoom(1);
    },

    formatRgb: function (value) {
      if (value !== undefined)
        return 'rgb(' + value.r + ',' + value.g + ',' + value.b + ')';
    },

    hexToRgb: function (hex) {
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
          }
        : null;
    },

    lightOrDark: function (color) {
      // Variables for red, green, blue values
      var r, g, b, hsp;

      // Check the format of the color, HEX or RGB?
      try {
        if (color.match(/^rgb/)) {
          // If RGB --> store the red, green, blue values in separate variables
          color = color.match(
            /^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/
          );

          r = color[1];
          g = color[2];
          b = color[3];
        } else {
          // If hex --> Convert it to RGB
          color = +(
            '0x' + color.slice(1).replace(color.length < 5 && /./g, '$&$&')
          );

          r = color >> 16;
          g = (color >> 8) & 255;
          b = color & 255;
        }
      } catch (ex) {
        //console.log('Exception', ex.message);
        mdtLogger.error(this, 'Inner color', ex.message);
      }

      // HSP (Highly Sensitive Poo)
      hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));

      // Using the HSP value, determine whether the color is light or dark
      if (hsp > 165) {
        return 1; //light
      } else {
        return 0; //dark
      }
    },

    _showData: function (currentID, data, statuses, saved_configs, filters) {
      this._initSavedConfigsSelect(saved_configs, currentID);
      this._initTicketTypeSelect(data);
      this._initContextMenu();
      this._initFilterList(filters);
      this.options.ticketStatuses = statuses;

      this._createControls(
        $('.graph-gui-head .edit-form-custom-ol', this.element)
      );
    },

    _request: function (request, header, async, callback) {
      if (!this._isAlive()) return;
      var reqObj = {};
      switch (header['widgetCommand']) {
        case this._commandList.graph_ticket_type_select:
          reqObj['ticketType'] = header['ticketType'];
          reqObj['filters'] = header['filters'];

          this._super(reqObj, this._commandList.graph_ticket_type_select);

          reqObj = null;
          break;

        case this._commandList.graph_save_config:
          reqObj = header['request'];
          this._super(reqObj, this._commandList.graph_save_config);

          reqObj = null;
          break;

        case this._commandList.graph_delete_config:
          reqObj = header['request'];
          this._super(reqObj, this._commandList.graph_delete_config);

          reqObj = null;
          break;

        default:
          this._super(request, header, async, callback);
          break;
      }
    },

    _resizeWidget: function () {},

    _createInterface: function ($data) {
      var self = this;

      // if (self.options.savedConfigs.length != 0) debugger;
      // self.options.positions = JSON.parse(
      //   self.options.savedConfigs[0]['value']
      // );

      $data.forEach((entry) => {
        var edge = {};

        try {
          edge = entry.WorkFlowAction;
        } catch (ex) {
          mdtLogger.error('GraphWidget - createInterface', ex.message);
        }

        edge.DashPattern = '';

        switch (edge.RightGroupName) {
          case self.options.rightGroupName.supervisors:
            edge.Color = self.options.colorDictionary.lightRed;

            break;

          case self.options.rightGroupName.agents:
            edge.Color = self.options.colorDictionary.green;

            break;

          case self.options.rightGroupName.script:
            edge.Color = self.options.colorDictionary.black;

            break;

          case self.options.rightGroupName.none:
            edge.Color = self.options.colorDictionary.gray;
            edge.DashPattern = 'dashed';

            break;
        }

        switch (edge.ActionViewName) {
          case self.options.actionViewName.button:
            edge.ActionViewName = 'button';

            break;

          case self.options.actionViewName.menu:
            edge.ActionViewName = 'menu';

            break;

          case self.options.actionViewName.none:
            edge.ActionViewName = 'none';
            edge.DashPattern = 'dashed';

            break;

          default:
            edge.ActionViewName = 'null';

            break;
        }
      });

      Promise.resolve(this.setUpGraph($data))
        .then(this.setUpHtmlLabel())
        .then(function () {
          $('#cyWorkflow').addClass('cyWorkflowAnimation');
        });
    },

    _initTicketTypeSelect: function ($content) {
      this._updateTicketTypesList($content);
    },

    _initSavedConfigsSelect: function (saved_configs, currentID) {
      this._updateSavedConfigs(saved_configs, currentID);
    },

    _initHeader: function () {
      if (!this._isAlive()) return;
      var self = this;

      $('.graph-gui', this.element).parent().css('overflow', 'hidden');

      try {
        var footer_shell_graph_config = $(
          this._templates.workflow_graph_config
        ).prependTo(this._controls.graph_header);

        var legend = $(this._templates.legend.legendButton)
          .appendTo(this._controls.graph_filter)
          .find('a.workflow_graph_legend_btn')
          .off()
          .on('click', function () {
            try {
              var legendDiv = $(
                '.graph-gui .graph-content span.workflow_graph_legend'
              );

              if (
                legendDiv.length != 0 &&
                legendDiv.css('display') === 'none'
              ) {
                legendDiv.css('display', 'inline');
                legendDiv.draggable();
                legendDiv
                  .find('span.legend_closethick')
                  .off()
                  .on('click', function () {
                    legendDiv.css('display', 'none');
                  });
              }
            } catch (ex) {
              mdtLogger.error(
                this,
                'Workflow Graph Legend Binding',
                ex.message
              );
            }
          });

        var refresh = $(this._templates.filterActions.refresh)
          .appendTo(this._controls.graph_filter)
          .find('a.workflow_graph_refresh')
          .off()
          .on('click', function () {
            try {
              self.refreshGraph.call(self);
            } catch (ex) {
              mdtLogger.error(
                this,
                'Workflow Graph Refresh Binding',
                ex.message
              );
            }
          });

        var filterButtons = $(this._templates.filterActions.filter).appendTo(
          this._controls.graph_filter
        );

        filterButtons
          .find('a.workflow_graph_filters_edit')
          .off()
          .on('click', async function () {
            try {
              await self.graphWidgetFiltersEdit.call(self).then((result) => {
                //debugger;
                setTimeout(function () {
                  self.centerGraph();
                }, 300);
              });
            } catch (ex) {
              mdtLogger.error(
                this,
                'Workflow Graph Filter Binding',
                ex.message
              );
            }
          });

        filterButtons
          .find('a.workflow_graph_filters_reset')
          .off()
          .on('click', function () {
            try {
              self.graphWidgetFiltersReset.call(self);
            } catch (ex) {
              mdtLogger.error(
                this,
                'Workflow Graph Filter Reset Binding',
                ex.message
              );
            }
          });

        filterButtons = null;
      } catch (ex) {
        mdtLogger.error(this, 'Workflow Graph Filter Init Header', ex.message);
      }
    },

    _getSavedWorkflowGraph: function (graph_id, bShowWarn) {
      var workflow_graph;
      for (var i = 0, len = this.options.savedConfigs.length; i < len; i++) {
        var flt = this.options.savedConfigs[i];
        if (flt['id'] == graph_id) {
          workflow_graph = flt;
          break;
        }
      }
      if (!workflow_graph && bShowWarn !== false)
        mdt.notifyUser('Could not find saved workflow graph settings.', 2);
      return workflow_graph;
    },

    graphWidgetFiltersEdit: function (evt) {
      return new Promise((resolve, reject) => {
        var that = this;
        // if (that.options.gridModel.filters.length == 0) return;
        // if (typeof that.options.fnFiltersEdit == TYPE_FUNCTION) {
        //     return that.options.fnFiltersEdit();
        // }

        that.options.graphFiltersList = $('.graph-gui .graph-filter-list');
        // that.gridDialogsShow(true);
        that.options.graphFiltersList
          .removeClass('filters-list-on filters-list-off')
          .addClass('filters-list-on');
        that.options.graphFiltersList.addClass('filters-list-on');
        //that.options.graphFiltersList.css('visibility', 'visible');
        that.options.graphFiltersList.css('display', 'flex');
        $('.graph-gui>.graph-content>.cyWorkflowWidget').css('height', '73vh');

        that._updateHeader('on');

        that.bindEventsToFilterButtons();
        that.bindEventsToSelectFilters();

        resolve(true);
      });

      //that.options.bLockAutoUpdateTimer = true;
      //that._stopAutoUpdateTimer();

      // that.filterDialog = $('<div/>').prop('title', 'Filters').appendTo(that.options.gDialogsJQ)
      //     .gridFiltersDialog({
      //         filtersVal: that.options.gridModel.filtersVal,
      //         filterName: $('.grid_footer .footer-select SELECT OPTION:selected', that.element).text(),
      //         widgetRequest: that.options.widgetRequest,
      //         widgetHeaderObj: that.options.widgetHeaderObj,
      //         onClose: function(filters, applyFilter) {
      //             that.gridFiltersDialogClose.call(that, filters, applyFilter);
      //         }
      //     });
    },

    graphWidgetFiltersReset: function () {
      var self = this;

      mdtLogger.log(this, 'Reset all workflow graph filters');

      self.options.graphFiltersList
        .removeClass('filters-list-on filters-list-off')
        .addClass('filters-list-off');
      self.options.graphFiltersList.css('display', 'none');
      $('.graph-gui>.graph-content>.cyWorkflowWidget').css('height', '80vh');

      //self.options.graphFiltersList.css('visibility', 'hidden');

      Array.from(
        $('.graph-gui .graph-filter-list', this.element).find('select')
      ).forEach((select) => {
        $(select).val(null).trigger('change');
      });

      self.refreshGraph();
      self._updateHeader('off');
      self.centerGraph();
    },

    refreshGraph: function () {
      this._setUpDisplay(
        this._commandList.graph_ticket_type_select,
        this.options.selectedType,
        this.options.graphFilters
      );
    },

    _updateHeader: function (status) {
      if (!this._isAlive()) return;
      var self = this;

      var filterData = { title: 'Test', enabled: true };

      var statusOff = $(
        '.workflow_graph_filters_edit>.status_off',
        self._controls.graph_header
      );
      var statusOn = $(
        '.workflow_graph_filters_edit>.status_on',
        self._controls.graph_header
      );

      if (status === 'off') {
        statusOn.css('display', 'none');
        statusOff.css('display', 'inline');
        filterData.enabled = false;
      } else {
        statusOff.css('display', 'none');
        statusOn.css('display', 'inline');
      }

      //var filterData = this._filterData();

      if (filterData === false || filterData.enabled === false) {
        $(
          'a.grid_filters_edit.workflow_graph_filters_edit',
          this._controls.graph_header
        )
          .attr('title', '')
          .parent()
          .removeClass('graph_filters_on graph_filters_off')
          .addClass('graph_filters_off');
      } else {
        $(
          'a.grid_filters_edit.workflow_graph_filters_edit',
          this._controls.graph_header
        )
          .attr('title', filterData.title)
          .parent()
          .removeClass('graph_filters_on graph_filters_off')
          .addClass('graph_filters_on');
      }
    },

    applyFilters: function () {
      //this.options.graphFiltersList.css('visibility', 'hidden');

      if (Object.keys(this.options.graphFilters).length == 0) {
        this.options.graphFiltersList
          .removeClass('filters-list-on filters-list-off')
          .addClass('filters-list-off');
        this._updateHeader('off');
        this.options.graphFiltersList.css('display', 'none');
        $('.graph-gui>.graph-content>.cyWorkflowWidget').css('height', '80vh');
      }
      this._setUpDisplay(
        this._commandList.graph_ticket_type_select,
        this.options.selectedType,
        this.options.graphFilters
      );
    },

    bindEventsToFilterButtons: function () {
      try {
        var self = this;

        $('.graph-gui .graph-filter-list')
          .find('.filters-apply')
          .off()
          .on('click', function () {
            self.applyFilters();
          });
        $('.graph-gui .graph-filter-list')
          .find('.filters-cancel')
          .off()
          .on('click', async function () {
            await self.cancelFilterProcess().then((result) => {
              setTimeout(function () {
                self.centerGraph();
              }, 300);
            });
          });
      } catch (ex) {
        mdtLogger.error(this, 'bindEventsToFilterButtons', ex.message);
      }
    },

    bindEventsToSelectFilters: function () {
      try {
        var self = this;
        Array.from(
          $('.graph-gui .graph-filter-list', this.element).find('select')
        ).forEach((select) => {
          $(select).on('change', function () {
            self.options.graphFilters[$(select).attr('name')] = $(select).val();
            if ($(select).val().length == 0) {
              delete self.options.graphFilters[$(select).attr('name')];
            }
          });
        });
      } catch (ex) {
        mdtLogger.error(this, 'bindEventsToSelectFilters', ex.message);
      }
    },

    cancelFilterProcess: function () {
      return new Promise((resolve, reject) => {
        if (Object.keys(this.options.graphFilters).length == 0) {
          this.options.graphFiltersList
            .removeClass('filters-list-on filters-list-off')
            .addClass('filters-list-off');
          this._updateHeader('off');
        }
        //this.options.graphFiltersList.css('visibility', 'hidden');
        this.options.graphFiltersList.css('display', 'none');
        $('.graph-gui>.graph-content>.cyWorkflowWidget').css('height', '80vh');
        resolve(true);
      });
    },

    savePositions: function () {
      var positions = {};
      var toggled = false;

      cyWorkflow.nodes().forEach((node) => {
        //if ((node._private.style.display === undefined) || (node._private.style.display.value === 'element'))
        positions[node._private.data.id] = {
          x: node._private.position.x,
          y: node._private.position.y,
        };
      });

      positions['toggled'] = toggled;

      for (let node of cyWorkflow.nodes()) {
        try {
          if (
            node._private.style !== undefined &&
            node._private.style.display
          ) {
            if (node._private.style.display.value === 'none') toggled = true;
            break;
          }
        } catch (e) {
          //console.log(e.message);
          mdtLogger.error('mdt.graphWidget - savePositions', e.message);
        }
      }
      positions['toggled'] = toggled;
      return JSON.stringify(positions);
    },

    _onSavedConfigsClick: function ($e) {
      var self = this;
      var command = $('a', $e).attr('name');
      var request, widgetComand, configName;

      switch (command) {
        case 'save-graph-config':
          var graphUIOptions = self.savePositions();

          request = {
            CategoryID: 'workflow_graph',
            ConfigValue: graphUIOptions,
          };

          widgetCommand = this._commandList.graph_save_config;

          if (this._configState === this._configStateCode.AddNewItem) {
            configName = $.trim(
              $('input.new-config-name', this._controls.footer_shell).val()
            );

            if (configName === '') {
              mdt.notifyUser('Please enter a graph config name.', 2);
              $('input.new-config-name', this._controls.footer_shell).focus();
              return;
            }

            // set config name
            request['ConfigName'] = configName;

            var bExists = false;
            if (this.options.savedConfigs) {
              for (
                var i = 0, len = this.options.savedConfigs.length;
                i < len;
                i++
              ) {
                var flt = this.options.savedConfigs[i];
                if (flt['name'] == configName) {
                  bExists = true;
                  break;
                }
              }
            }

            if (bExists === true) {
              this._confirm(
                'Config name allready exists.</br> Overwrite ?',
                function () {
                  this._request(null, {
                    widgetCommand,
                    request,
                  });
                }
              );
            } else {
              this._request(null, {
                widgetCommand,
                request,
              });
            }
          } else {
            var selectVal = Math.round(this.options.selectConfigsObj.val());
            if (selectVal <= 0) {
              mdt.notifyUser(
                'Please select graph config that you want to save as.',
                2
              );
              return;
            }

            var workflow_graph = this._getSavedWorkflowGraph(selectVal);
            if (!workflow_graph) return;

            request['ConfigID'] = selectVal;
            request['ConfigName'] = workflow_graph['name'];

            this._confirm('Overwrite selected config settings ?', function () {
              this._request(null, {
                widgetCommand,
                request,
              });
            });
          }
          break;

        case 'discard-graph-config':
          if (this._configState === this._configStateCode.AddNewItem) {
            $('.new-config-name', this._controls.footer_shell).val('');
            this._updateSavedConfigsState(this._configStateCode.Default);
          } else {
            var selectVal = Math.round(this.options.selectConfigsObj.val());
            if (selectVal <= 0) {
              mdt.notifyUser(
                'Please select graph config that you want to delete.',
                2
              );
              return;
            }

            this._confirm('Delete selected settings ?', function () {
              var workflow_graph = this._getSavedWorkflowGraph(selectVal);
              if (!workflow_graph) return;

              request = {
                CategoryID: 'workflow_graph',
                ConfigID: selectVal,
                ConfigName: workflow_graph['name'],
              };

              widgetCommand = this._commandList.graph_delete_config;
              this._request(null, {
                widgetCommand,
                request,
              });
              //requestFn.call(this.options.gridControl, request, header);
            });
          }
          break;

        case 'new-graph-config':
          this._updateSavedConfigsState(this._configStateCode.AddNewItem);
          break;
      }
    },

    _updateTicketTypesList: function (ticketTypesList) {
      try {
        var self = this;
        this.options.ticketTypesList = ticketTypesList;

        // if nothing new
        if (!ticketTypesList) {
          if (this.options.selectGraphObj) {
            this.options.selectGraphObj.parent().off().remove();
            this.options.selectGraphObj = void 0;
          }
          return;
        }

        // if we have items
        var sOptions = '';

        for (
          var i = 0, len = this.options.ticketTypesList.length;
          i < len;
          i++
        ) {
          try {
            var flt = this.options.ticketTypesList[i];
            if (flt['Id'] != void 0 && flt['Name'] != void 0) {
              // fix string values
              if (typeof this.options.ticketTypesList[i] === 'string')
                this.options.ticketTypesList[i]['Name'] = JSON.parse(
                  this.options.ticketTypesList[i]['Name']
                );

              sOptions +=
                '<option value="' +
                flt['Id'] +
                '">' +
                mdt.encodeHtml(flt['Name']) +
                '</option>';

              if (this.options.last_graph_id === -1)
                if ($.trim(flt['Name']).toLowerCase() === 'default') {
                  this.options.last_graph_id = flt['Id'];
                  this.options.positions = this.options.ticketTypesList[i];
                }
            }
          } catch (ex2) {
            mdtLogger.error(this, '_updateTicketTypesList', ex2.message);
          }
        }

        //create select if does not exist
        if (!this.options.selectGraphObj) {
          var $fspan = $('.ticket-type-select', this._controls.graph_header);
          if (!$fspan.length)
            $fspan = $(
              '<span class="ticket-type-select" title=""></span>'
            ).prependTo(this._controls.graph_header);

          this.options.selectGraphObj = $(
            '<select class="select2"></select>'
          ).appendTo($fspan);
          this._createControl.select(this.options.selectGraphObj.parent());

          var oldVal = this.options.selectGraphObj.val();

          //
          this.options.selectGraphObj.find('option').remove();
          this.options.selectGraphObj
            .off('change.mdt') // stop event on recreating select options
            .append(
              /*'<option value="-1"> = Select saved pivot = </option>' +*/ sOptions
            )
            .val(this.options.last_graph_id)
            .trigger('change')
            .on('change.mdt', function () {
              var selectVal = Math.round($(this).val());
              self._setUpDisplay(
                self._commandList.graph_ticket_type_select,
                selectVal,
                this.options.graphFilters
              );
            });

          // if new val then we trigger the change
          if (oldVal != this.options.last_graph_id)
            this.options.selectGraphObj.trigger('change.mdt');
        }
      } catch (ex) {
        mdtLogger.error(this, '_updateTicketTypesList', ex.message);
      }
    },

    _updateSavedConfigs: function (saved_configs, currentID) {
      try {
        var self = this;
        this.options.savedConfigs = saved_configs;
        this.options.last_graph_id = isDefined(currentID) ? currentID : -1;

        // if nothing new
        if (!saved_configs) {
          if (this.options.selectConfigsObj) {
            this.options.selectConfigsObj.parent().off().remove();
            this.options.selectConfigsObj = void 0;
          }

          this._updateSavedConfigsState(this._configStateCode.Default);

          return;
        }

        // if we have items
        var selectConfigsOptions = '';

        for (var i = 0, len = this.options.savedConfigs.length; i < len; i++) {
          try {
            var flt = this.options.savedConfigs[i];
            if (flt['id'] != void 0 && flt['name'] != void 0) {
              // fix string values
              if (typeof this.options.savedConfigs[i] === 'string')
                this.options.savedConfigs[i]['name'] = JSON.parse(
                  this.options.savedConfigs[i]['name']
                );

              selectConfigsOptions +=
                '<option value="' +
                flt['id'] +
                '">' +
                mdt.encodeHtml(flt['name']) +
                '</option>';

              if (this.options.last_graph_id === -1)
                if ($.trim(flt['name']).toLowerCase() === 'default') {
                  this.options.last_graph_id = flt['id'];
                  this.options.positions =
                    this.options.savedConfigs[i]['value'];
                }
            }
          } catch (ex2) {
            mdtLogger.error(this, '_updateSavedConfigs', ex2.message);
          }
        }

        //create select if does not exist
        if (!this.options.selectConfigsObj) {
          if (!this._controls.footer_shell) {
            this._controls.footer_shell = $('.footer_shell ', this.element);
          }

          var $fspan = $('.workflow-graph-config', this._controls.footer_shell);
          if (!$fspan.length)
            $fspan = $(
              '<span class="workflow-graph-config" title=""></span>'
            ).prependTo(this._controls.footer_shell);

          this.options.selectConfigsObj = $(
            '<select class="select2"></select>'
          ).appendTo($fspan);
          this._createControl.select(this.options.selectConfigsObj.parent());
        }
        var oldVal = this.options.selectConfigsObj.val();

        this.options.selectConfigsObj.find('option').remove();
        this.options.selectConfigsObj
          .off('change.mdt') // stop event on recreating select options
          .append(
            /*'<option value="-1"> = Select saved pivot = </option>' +*/ selectConfigsOptions
          )
          .val(this.options.last_graph_id)
          .trigger('change')
          .on('change.mdt', function () {
            self._setSavedGraph($(this).val());
            // self._setUpDisplay(
            //   self._commandList.graph_ticket_type_select,
            //   selectVal,
            //   this.options.graphFilters
            // );
          });

        // if new val then we trigger the change
        if (oldVal != this.options.last_graph_id)
          this.options.selectConfigsObj.trigger('change.mdt');

        this._updateSavedConfigsState(this._configStateCode.Default);
      } catch (ex) {
        mdtLogger.error(this, '_updateSavedConfigs', ex.message);
      }
    },

    _updateSavedConfigsState: function (state) {
      this._configState = state || this._configStateCode.Default;

      var onSelection = '',
        offSelection =
          '.save-graph-config, .discard-graph-config, .new-graph-config, .new-config-name';

      // reset input value
      $('input.new-config-name', this._controls.footer_shell).val('');
      // reset button icon and title
      $('.discard-graph-config > a', this._controls.footer_shell)
        .removeClass('ui-icon-cancel')
        .addClass('ui-icon-trash')
        .attr('title', 'Click to delete selected item');

      //$('.save-graph-config, .discard-graph-config, .new-graph-config, .new-config-name').off();
      switch (this._configState) {
        case this._configStateCode.Default:
          if (this.options.savedConfigs)
            onSelection = '.save-graph-config, .discard-graph-config,';
          onSelection += '.new-graph-config';
          break;
        case this._configStateCode.AddNewItem:
          onSelection =
            '.save-graph-config, .discard-graph-config, .new-config-name';

          $('.discard-graph-config > a', this._controls.footer_shell)
            .removeClass('ui-icon-trash')
            .addClass('ui-icon-cancel')
            .attr('title', 'Cancel');
          break;
        default:
          // no saved items
          onSelection = '.new-graph-config';
          break;
      }
      var self = this;
      $(offSelection, this._controls.footer_shell)
        .removeClass('hover')
        .off()
        .hide();
      if (onSelection)
        $(onSelection, this._controls.footer_shell)
          .show()
          .not('input')
          .on('mouseover', function () {
            $(this).addClass('hover');
          })
          .on('mouseout', function () {
            $(this).removeClass('hover');
          })
          .on('mousedown', function () {
            self._onSavedConfigsClick($(this));
          });
    },

    _updateGraphPositions: function () {
      this.options.positions = this.options.last_workflowGraph_positions;

      // console.log('Update Graph');

      try {
        this.setNewGraphPositions();
      } catch (ex) {
        mdtLogger.error(
          'mdt-cyWorkflow - update graph - set new positions',
          ex.message
        );
      }
    },

    setNewGraphPositions: function () {
      var self = this;

      try {
        if (cyWorkflow.hasOwnProperty('_private')) {
          cyWorkflow.nodes().forEach((node) => {
            if (self.options.positions.hasOwnProperty(node._private.data.id)) {
              cyWorkflow
                .$(`#${node._private.data.id}`)
                .style('display', 'element');
              cyWorkflow.$(`#${node._private.data.id}`).position({
                x: self.options.positions[node._private.data.id].x,
                y: self.options.positions[node._private.data.id].y,
              });
            }
          });

          var toggled = false;

          if (self.options.positions.hasOwnProperty('toggled')) {
            toggled = self.options.positions['toggled'];
          }
          if (toggled) {
            self.contextMenuOptions.toggleIsolatedNodes();
          }
          // var layout = cy.layout({
          //     name: 'preset',
          //     convergenceThreshold: 100,
          //     animate: true,
          //     avoidOverlap: false,
          //     circle: false,
          //     animationDuration: 500,
          //     condense: false,
          //     fit: true,
          //     padding: 100
          // });

          // layout.run();

          // cyWorkflow.animate(
          //   {
          //     pan: { x: 20, y: 20 },
          //     zoom: 1,
          //     fit: {
          //       eles: cyWorkflow.elements(),
          //     },
          //   },
          //   {
          //     duration: 700,
          //   }
          // );
        }
      } catch (e) {
        mdtLogger.error('mdt.cyWorkflow - nodes not defined', e.message);
      }
    },

    _setSavedGraph: function (graph_id) {
      graph_id = Math.round(graph_id);
      if (isNaN(graph_id) || graph_id <= 0) return;
      //if (!this._currentRecords) return;

      this.options.last_graph_id = graph_id;

      var graph = this._getSavedWorkflowGraph(graph_id);
      if (graph) {
        this.options.last_workflowGraph_positions = JSON.parse(graph['value']);
      }

      this._updateGraphPositions();
    },

    _setUpDisplay: function (widgetCommand, selectVal, filters) {
      this.options.selectedType = selectVal;

      this._request(null, {
        widgetCommand: widgetCommand,
        ticketType: selectVal,
        filters: filters,
      });
    },

    setUpGraph: async function (workflowData, filterData) {
      $('#cyWorkflow').removeClass('cyWorkflowAnimation');

      var self = this;
      var ctrlKeyDown = false;
      var ticketColors = {};
      var currentStatuses = [];
      var edges = [];

      workflowData.forEach((entry) => {
        entry.WorkFlowAction.Icon = entry.Icon;
        edges.push(entry.WorkFlowAction);
      });

      $(window).click(function (e) {
        if (self.contextMenuOptions.menuVariables.menuVisible) {
          self.contextMenuOptions.toggleMenu('hide');
        }
      });

      $(window).keydown(function (event) {
        if (event.ctrlKey) ctrlKeyDown = true;
      });

      $(window).keyup(function (event) {
        ctrlKeyDown = false;
      });

      var cyWorkflow = (window.cyWorkflow = cytoscape({
        container: document.getElementById('cyWorkflow'),
        autounselectify: false,
        boxSelectionEnabled: true,
        panningEnabled: true,
        selectionType: 'single',

        layout: {
          name: 'preset',
        },

        wheelSensitivity: 0.1,

        style: [
          {
            selector: 'node',
            css: {
              'background-color': '#ffffff',
              content: 'data(label)',
              'border-width': '1px',
              'border-color': 'black',
              'border-style': 'dashed',
              color: 'white',
              width: '155px',
              height: '50px',
              shape: 'round-rectangle',
              'text-halign': 'center',
              'text-valign': 'center',
              'text-wrap': 'wrap',
              'font-size': '15',
              'font-family':
                'Century Gothic,CenturyGothic,AppleGothic,sans-serif',
              'z-index': 100,
            },
          },
          {
            selector: 'edge',
            css: {
              content: 'data(label)',
              'edge-text-rotation': 'autorotate',
              // 'overlay-opacity': 0,
              'line-color': '#ff6f01',
              'text-wrap': 'wrap',
              'text-margin-y': '-1em',
              width: '4',
              'font-size': '16',
              'font-family':
                'Century Gothic,CenturyGothic,AppleGothic,sans-serif',
              'target-arrow-shape': 'vee',
              'target-arrow-color': '#3d3d3d',
              'arrow-scale': '2',
              'curve-style': 'bezier',
              opacity: 1,
              // "control-point-distances": "20px 30px 40px",
              // "control-point-weights": "0.5 0.2 0.8",
              'control-point-step-size': '7em', //6 or more for self-edges to be properly drawn
              'z-compound-depth': 'orphan',
            },
          },
          {
            selector: ':selected',
            style: {},
          },
        ],
      }));

      cyWorkflow.userZoomingEnabled(true);

      //adding nodes dinamically

      statusNodes = self.options.ticketStatuses || {};

      ticketColors[statusNodes.length] = '#FFFFFF';

      for (var k = 0; k < Object.keys(statusNodes).length; k++) {
        try {
          var currentNode = Object.values(statusNodes)[k];
          ticketColors[currentNode.ID] = currentNode.Color;

          if (currentNode !== undefined) {
            if (
              this.options.positions[parseInt(currentNode.ID)] !== undefined
            ) {
              if (
                this.options.positions[parseInt(currentNode.ID)].x !==
                  undefined &&
                this.options.positions[parseInt(currentNode.ID)].y !== undefined
              ) {
                cyWorkflow
                  .add([
                    {
                      group: 'nodes',
                      data: {
                        id: parseInt(currentNode.ID),
                        // label: `${currentNode.Name} \n  Tickets: ${ticketsPerStatus[currentNode.ID] || 0}`
                        label: `${currentNode.Name}`,
                      },
                      position: {
                        x: this.options.positions[parseInt(currentNode.ID)].x,
                        y: this.options.positions[parseInt(currentNode.ID)].y,
                      },
                    },
                  ])
                  .css({
                    'background-color': currentNode.Color,
                    color: `${
                      this.lightOrDark(currentNode.Color) ? 'black' : 'white'
                    }`,
                  });
              }
            } else if (Object.keys(this.options.positions).length == 0) {
              cyWorkflow
                .add([
                  {
                    group: 'nodes',
                    data: {
                      id: parseInt(currentNode.ID),
                      label: `${currentNode.Name}`,
                    },
                    position: {
                      x: 100 * (parseInt(currentNode.ID) + 2),
                      y: 70 * (parseInt(currentNode.ID) + 2),
                    },
                  },
                ])
                .css({
                  'background-color': currentNode.Color,
                  color: `${
                    this.lightOrDark(currentNode.Color) ? 'black' : 'white'
                  }`,
                });
            }
          }
        } catch (ex) {
          //console.log(ex);
          mdtLogger.error('mdt-cyWorkflow - adding nodes', ex.message);
        }
      }

      for (var k = 0; k < Object.keys(edges).length; k++) {
        try {
          if (
            Object.values(edges)[k].FromStatusID != null &&
            Object.values(edges)[k].ToStatusID != null
          ) {
            cyWorkflow
              .add([
                {
                  group: 'edges',
                  data: {
                    source: Object.values(edges)[k].FromStatusID,
                    target: Object.values(edges)[k].ToStatusID,
                    text: '',
                    actionViewName: Object.values(edges)[k].ActionViewName,
                    actionName: Object.values(edges)[k].ActionName,
                    iconName: Object.values(edges)[k].Icon,
                    rightGroup: Object.values(edges)[k].RightGroupName,
                    color: Object.values(edges)[k].Color,
                    label: '', // `${Object.values(edges)[k].ActionName}`,
                    ids: '',
                    type: 'bendpoint',
                  },
                },
              ])
              .css({
                'line-color': Object.values(edges)[k].Color,
                'line-style': Object.values(edges)[k].DashPattern,
              });
          }
        } catch (ex) {
          //console.log(ex);
          mdtLogger.error('mdt-cyWorkflow - adding edges', ex.message);
        }
      }

      try {
        cyWorkflow.nodes().forEach((node) => {
          if (node.connectedEdges().length == 0) {
            node.addClass('isolated');
          }
        });

        var actionNameIdRegexExtractor = / \(-?[0-9][0-9]?\)/;

        cyWorkflow.edges().forEach((edge) => {
          edge.addClass(
            `${
              edge._private.data.actionViewName != null
                ? edge._private.data.actionViewName
                : ''
            }`
          );
          edge.addClass(
            `${edge._private.data.actionName
              .replace(actionNameIdRegexExtractor, '')
              .trim()
              .replace(/ /g, '')}`
          );
        });
      } catch (ex) {
        mdtLogger.error(
          'mdt-cyWorkflow- compute incomers and outgoers',
          ex.message
        );
      }

      cyWorkflow.style().update();

      var selectedNodes = {};
      var selectedPredecessors = {};
      var ispredecessorsSelected = false;

      cyWorkflow.on('click', function (event) {
        if ($.isEmptyObject(event.target._private.data)) {
          if (selectedNodes)
            for (var i = 0; i < selectedNodes.length; i++) {
              selectedNodes[i].style(
                'background-color',
                ticketColors[selectedNodes[i]._private.data.id]
              );
              selectedNodes[i].style(
                'color',
                self.lightOrDark(
                  ticketColors[selectedNodes[i]._private.data.id]
                )
                  ? 'black'
                  : 'white'
              );
            }

          if (ispredecessorsSelected) {
            selectedPredecessors['nodes'].forEach((predecessor) => {
              predecessor.animate({
                style: {
                  backgroundColor: ticketColors[predecessor._private.data.id],
                  color: self.lightOrDark(
                    ticketColors[predecessor._private.data.id]
                  )
                    ? 'black'
                    : 'white',
                },
              });
            });

            selectedPredecessors['edges'].forEach((predecessor) => {
              predecessor.animate(
                { style: { 'line-color': predecessor._private.data.color } },
                { duration: 1 }
              );
            });

            ispredecessorsSelected = false;
            isOneNodeSelected = false;
          }

          window['selectedNodes'] = {};
          selectedNodes = window['selectedNodes'];
        }
      });

      cyWorkflow.on('click', 'node', function (event) {
        var node = event.target;
        if (!ctrlKeyDown) {
          window['selectedNodes'] = cyWorkflow.$('node:selected');
          selectedNodes = window['selectedNodes'];
        }

        if (ispredecessorsSelected) {
          selectedPredecessors['nodes'].forEach((predecessor) => {
            if (predecessor._private.data.id != node._private.data.id)
              predecessor.animate(
                {
                  style: {
                    backgroundColor: ticketColors[predecessor._private.data.id],
                    color: self.lightOrDark(
                      ticketColors[predecessor._private.data.id]
                    )
                      ? 'black'
                      : 'white',
                  },
                },
                { duration: 150 }
              );
          });
          selectedPredecessors['edges'].forEach((predecessor) => {
            predecessor.animate(
              { style: { 'line-color': predecessor._private.data.color } },
              { duration: 1 }
            );
          });

          if (
            selectedPredecessors['currentNode']._private.data.id !==
            node._private.data.id
          ) {
            ispredecessorsSelected = false;
          }

          if (!ctrlKeyDown)
            selectedPredecessors['currentNode'].animate(
              {
                style: {
                  backgroundColor:
                    ticketColors[
                      selectedPredecessors['currentNode']._private.data.id
                    ],
                  color: self.lightOrDark(
                    ticketColors[
                      selectedPredecessors['currentNode']._private.data.id
                    ]
                  )
                    ? 'black'
                    : 'white',
                },
              },
              { duration: 50 }
            );
        }

        //console.log("Connected edges", this.connectedEdges())
        //console.log("Connected edges targets", this.connectedEdges().targets())
        //console.log("Successors", this.successors()) //successor nodes and edges including self edges
        //console.log("Successor targets", this.successors().targets()) //successor nodes only
        //console.log("Predecessors", this.predecessors().nodes())
        //console.log("Incomers", this.incomers())

        if (ispredecessorsSelected == false && !ctrlKeyDown) {
          selectedPredecessors['nodes'] = this.predecessors().nodes();
          selectedPredecessors['edges'] = this.predecessors().edges();
          selectedPredecessors['currentNode'] = node;
          selectedPredecessors['nodes'].forEach((predecessor) => {
            if (predecessor._private.data.id !== node._private.data.id)
              predecessor.animate(
                {
                  style: {
                    backgroundColor: self.options.colorDictionary.orange,
                    color: 'black',
                  },
                },
                { duration: 150 }
              );
          });
          selectedPredecessors['edges'].animate(
            { style: { 'line-color': self.options.colorDictionary.yellow } },
            { duration: 150 }
          );
          selectedPredecessors['currentNode'].animate(
            {
              style: {
                backgroundColor: self.options.colorDictionary.blue,
                color: 'black',
              },
            },
            { duration: 50 }
          );
          ispredecessorsSelected = true;
        }

        if (
          node._private.style['background-color'].strValue ==
          self.formatRgb(self.hexToRgb(self.options.colorDictionary.blue))
        ) {
          ispredecessorsSelected = false;
        }

        if (ctrlKeyDown) {
          for (var i = 0; i < selectedNodes.length; i++) {
            if (selectedNodes[i]._private.data.id == node._private.data.id) {
              selectedNodes[i].style(
                'background-color',
                ticketColors[selectedNodes[i]._private.data.id]
              );
              selectedNodes[i].style(
                'color',
                self.lightOrDark(
                  ticketColors[selectedNodes[i]._private.data.id]
                )
                  ? 'black'
                  : 'white'
              );
              cyWorkflow.$('node:unselected').add(selectedNodes[i]);
              delete cyWorkflow.$('node:selected')[i];
            }
          }
        }
        //}
      });

      cyWorkflow.on('click', 'edge', function (event) {
        var edge = event.target;
        //console.log('Edge clicked: source:' + edge._private.data.source + ' \n target: ' + edge._private.data.target);
      });

      var elementCtxPressed = false;

      cyWorkflow.on('cxttap', function (event) {
        if (event.target[0]) {
          if (['nodes', 'edges'].indexOf(event.target[0]._private.group) >= 0) {
            if (['edges'].indexOf(event.target[0]._private.group) >= 0) {
              elementCtxPressed = true;
              //self.contextMenuOptions.displayCustomContextMenu("edge", event.originalEvent, event.renderedPosition);
              //self.options.filterData = event.target[0]._private;
            } else if (['nodes'].indexOf(event.target[0]._private.group) >= 0) {
              elementCtxPressed = true;
              if (event.target[0]._private.data.id != currentStatuses.length) {
                //self.contextMenuOptions.displayCustomContextMenu("node", event.originalEvent, event.renderedPosition);
                //self.options.filterData = event.target[0]._private;
              }
            }
          }
        } else {
          elementCtxPressed = false;
          self.contextMenuOptions.displayClassicContextMenu(
            event.originalEvent,
            event.renderedPosition
          );
        }
      });

      cyWorkflow.on('layoutstop', function () {
        cyWorkflow.maxZoom(1);
        cyWorkflow.maxZoom(200);
        cyWorkflow.fit();
      });

      cyWorkflow.on('select', 'node', function (event) {
        window['selectedNodes'] = cyWorkflow.$('node:selected');
        selectedNodes = window['selectedNodes'];

        for (var i = 0; i < selectedNodes.length; i++) {
          selectedNodes[i].style(
            'background-color',
            self.options.colorDictionary.blue
          );
          selectedNodes[i].style('color', 'black');
        }
      });

      cyWorkflow.resize();

      var layout = cyWorkflow.layout({
        name: 'preset',
        convergenceThreshold: 100,
        animate: false,
        avoidOverlap: false,
        circle: false,
        animationDuration: 300,
        condense: false,
        fit: true,
        padding: 100,
      });

      layout.run();

      //cyWorkflow.fit();
    },

    setUpHtmlLabel: function () {
      cyWorkflow.htmlLabel([
        {
          query: 'edge',
          // valign: "top",
          // halign: "right",
          valignBox: 'top',
          halignBox: 'center',
          ealign: 'midpoint',
          autorotate: true,
          cssClass: '',
          tpl: function (data) {
            return `<div class="edge-label">
                             <span class="tk-gui">
                                    <span class="tk-btn-action">
                                            <span class="tk-icon ${data.iconName}">
                                            </span>
                                            <span id="tk-actionName" class="tk-action-name">${data.actionName}</span> 
                                            <span class="tk-icon actionView-${data.actionViewName}">
                                            </span>                        
                                    </span> 
                             </span>           
                           </div>`;
          },
        },
      ]);

      setTimeout(() => {
        $('.edge-label').parent().parent().addClass('edge-label-parent');
      }, 100);
    },
    _update: async function (header) {},
  });
})((this.mdt = this.mdt || {}), jQuery);
